from lerdon_libraries import *
from game_process import GameScreen
from ui import *

# –†–∞–∑–º–µ—Ä—ã –æ–∫–Ω–∞
screen_width, screen_height = 1200, 800

# –ü—É—Ç—å –∫ –ë–î
# === –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—É—Ç–∏ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö ===
if platform == 'android':
    from android.storage import app_storage_path

    storage_dir = app_storage_path()
else:
    storage_dir = os.path.dirname(__file__)

original_db_path = os.path.join(os.path.dirname(__file__), 'game_data.db')
copied_db_path = os.path.join(storage_dir, 'game_data.db')

# –ö–æ–ø–∏—Ä—É–µ–º –ë–î, –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç –≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
if not os.path.exists(copied_db_path):
    if os.path.exists(original_db_path):
        import shutil

        shutil.copy(original_db_path, copied_db_path)
        print(f"‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∞ –≤ {copied_db_path}")
    else:
        raise FileNotFoundError(f"‚ùå game_data.db –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ –ø—Ä–æ–µ–∫—Ç–µ!")

# –¢–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ –ø–æ–¥–∫–ª—é—á–∞—Ç—å—Å—è –∫ –ë–î
db_path = copied_db_path
print("‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ–º –ë–î –ø–æ –ø—É—Ç–∏:", db_path)


def save_last_clicked_city(city_name: str):
    conn = sqlite3.connect(db_path)
    cur = conn.cursor()
    # –µ—Å–ª–∏ —Å—Ç—Ä–æ–∫–∏ –µ—â—ë –Ω–µ—Ç, –≤—Å—Ç–∞–≤–∏–º, –∏–Ω–∞—á–µ –ø–µ—Ä–µ–ø–∏—à–µ–º
    cur.execute(
        "INSERT OR REPLACE INTO last_click (id, city_name) VALUES (1, ?)",
        (city_name,)
    )
    conn.commit()
    conn.close()


def load_cities_from_db(selected_kingdom):
    """
    –§—É–Ω–∫—Ü–∏—è –∑–∞–≥—Ä—É–∂–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –æ –≥–æ—Ä–æ–¥–∞—Ö –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –∫–Ω—è–∂–µ—Å—Ç–≤–∞ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã city.

    :param selected_kingdom: –ù–∞–∑–≤–∞–Ω–∏–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –∫–Ω—è–∂–µ—Å—Ç–≤–∞.
    :return: –°–ø–∏—Å–æ–∫ —Å–ª–æ–≤–∞—Ä–µ–π —Å –¥–∞–Ω–Ω—ã–º–∏ –æ –≥–æ—Ä–æ–¥–∞—Ö.
    """
    # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    conn = sqlite3.connect(db_path)
    cursor = conn.cursor()

    try:
        # –ó–∞–ø—Ä–æ—Å –∫ —Ç–∞–±–ª–∏—Ü–µ city –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–º—É –∫–Ω—è–∂–µ—Å—Ç–≤—É
        query = """
        SELECT id, kingdom, color, fortress_name, coordinates
        FROM city
        WHERE kingdom = ?
        """
        cursor.execute(query, (selected_kingdom,))
        rows = cursor.fetchall()

        # –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –≤ —Å–ø–∏—Å–æ–∫ —Å–ª–æ–≤–∞—Ä–µ–π
        cities = []
        for row in rows:
            city_data = {
                'id': row[0],
                'kingdom': row[1],
                'color': row[2],
                'fortress_name': row[3],
                'coordinates': row[4]  # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ—Ç—Å—è, —á—Ç–æ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã —Ö—Ä–∞–Ω—è—Ç—Å—è –∫–∞–∫ —Å—Ç—Ä–æ–∫–∞ "x,y"
            }
            cities.append(city_data)

        return cities

    except sqlite3.Error as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö: {e}")
        return []

    finally:
        # –ó–∞–∫—Ä—ã—Ç–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
        conn.close()


def cleanup_sqlite_cache(db_path):
    """
    –£–¥–∞–ª—è–µ—Ç .shm –∏ .wal —Ñ–∞–π–ª—ã, –µ—Å–ª–∏ –æ–Ω–∏ —Å—Ç–∞—Ä—à–µ 5 –º–∏–Ω—É—Ç.
    """
    shm_file = db_path + "-shm"
    wal_file = db_path + "-wal"

    for cache_file in [shm_file, wal_file]:
        if os.path.exists(cache_file):
            # –ü–æ–ª—É—á–∞–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ñ–∞–π–ª–∞
            file_mtime = os.path.getmtime(cache_file)
            age_seconds = time.time() - file_mtime
            if age_seconds > 300:  # 5 –º–∏–Ω—É—Ç = 300 —Å–µ–∫—É–Ω–¥
                try:
                    os.remove(cache_file)
                    print(f"üóëÔ∏è –£–¥–∞–ª—ë–Ω —É—Å—Ç–∞—Ä–µ–≤—à–∏–π —Ñ–∞–π–ª –∫—ç—à–∞: {cache_file}")
                except Exception as e:
                    print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Ñ–∞–π–ª {cache_file}: {e}")


def restore_from_backup():
    """
    –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã—Ö —Ç–∞–±–ª–∏—Ü (default) –≤ —Ä–∞–±–æ—á–∏–µ —Ç–∞–±–ª–∏—Ü—ã.
    –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –Ω–æ–≤–æ–π –∏–≥—Ä—ã –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –Ω–∞—á–∞–ª—å–Ω–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è.
    """
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
    logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')

    # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    conn = None
    try:
        conn = sqlite3.connect(db_path)
        cursor = conn.cursor()

        # –°–ø–∏—Å–æ–∫ —Ç–∞–±–ª–∏—Ü –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è
        tables_to_restore = [
            ("city_default", "city"),
            ("diplomacies_default", "diplomacies"),
            ("relations_default", "relations"),
            ("resources_default", "resources"),
            ("cities_default", "cities"),
            ("units_default", "units")
        ]

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –≤—Å–µ—Ö —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã—Ö —Ç–∞–±–ª–∏—Ü
        all_tables_exist = True
        for default_table, _ in tables_to_restore:
            cursor.execute(f"SELECT name FROM sqlite_master WHERE type='table' AND name=?", (default_table,))
            if not cursor.fetchone():
                logging.error(f"–¢–∞–±–ª–∏—Ü–∞ {default_table} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.")
                all_tables_exist = False

        if not all_tables_exist:
            logging.error("–ù–µ –≤—Å–µ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ —Ç–∞–±–ª–∏—Ü—ã –Ω–∞–π–¥–µ–Ω—ã. –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ.")
            return

        # –ù–∞—á–∞–ª–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
        cursor.execute("BEGIN TRANSACTION")

        # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã—Ö —Ç–∞–±–ª–∏—Ü –≤ —Ä–∞–±–æ—á–∏–µ
        for default_table, working_table in tables_to_restore:
            try:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –¥–∞–Ω–Ω—ã–µ –≤ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–π —Ç–∞–±–ª–∏—Ü–µ
                cursor.execute(f"SELECT COUNT(*) FROM {default_table}")
                if cursor.fetchone()[0] == 0:
                    logging.warning(f"–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è —Ç–∞–±–ª–∏—Ü–∞ {default_table} –ø—É—Å—Ç–∞. –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ.")
                    continue

                # –û—á–∏—â–∞–µ–º —Ä–∞–±–æ—á—É—é —Ç–∞–±–ª–∏—Ü—É
                cursor.execute(f"DELETE FROM {working_table}")

                # –ö–æ–ø–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–π —Ç–∞–±–ª–∏—Ü—ã –≤ —Ä–∞–±–æ—á—É—é
                cursor.execute(f'''
                    INSERT INTO {working_table}
                    SELECT * FROM {default_table}
                ''')
                logging.info(f"–î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –∏–∑ —Ç–∞–±–ª–∏—Ü—ã {default_table} –≤ —Ç–∞–±–ª–∏—Ü—É {working_table}.")
            except Exception as e:
                logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ç–∞–±–ª–∏—Ü—ã {working_table}: {e}")
                conn.rollback()  # –û—Ç–∫–∞—Ç—ã–≤–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
                return

        # –§–∏–∫—Å–∏—Ä—É–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
        conn.commit()
        logging.info("–í—Å–µ –¥–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –∏–∑ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã—Ö —Ç–∞–±–ª–∏—Ü.")

    except sqlite3.Error as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö: {e}")
        if conn:
            conn.rollback()  # –û—Ç–∫–∞—Ç—ã–≤–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
    finally:
        if conn:
            conn.close()


def clear_tables(conn):
    """
    –û—á–∏—â–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏–∑ —É–∫–∞–∑–∞–Ω–Ω—ã—Ö —Ç–∞–±–ª–∏—Ü –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö.
    :param conn: –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö SQLite.
    """
    tables_to_clear = [
        "buildings",
        "city",
        "diplomacies",
        "garrisons",
        "resources",
        "trade_agreements",
        "turn",
        "armies",
        "political_systems",
        "karma",
        "user_faction",
        "units",
        "experience",
        "queries",
        "results",
        "auto_build_settings"
    ]

    cursor = conn.cursor()

    try:
        for table in tables_to_clear:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º TRUNCATE –∏–ª–∏ DELETE –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ —Ç–∞–±–ª–∏—Ü—ã
            cursor.execute(f"DELETE FROM {table};")
            print(f"–¢–∞–±–ª–∏—Ü–∞ '{table}' —É—Å–ø–µ—à–Ω–æ –æ—á–∏—â–µ–Ω–∞.")

        # –§–∏–∫—Å–∏—Ä—É–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
        conn.commit()
    except sqlite3.Error as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ —Ç–∞–±–ª–∏—Ü: {e}")
        conn.rollback()  # –û—Ç–∫–∞—Ç –∏–∑–º–µ–Ω–µ–Ω–∏–π –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏


class MapWidget(Widget):
    def __init__(self, selected_kingdom=None, player_kingdom=None, **kwargs):
        super(MapWidget, self).__init__(**kwargs)
        self.conn = sqlite3.connect(db_path, check_same_thread=False)
        self.fortress_rectangles = []  # –°–ø–∏—Å–æ–∫ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∫—Ä–µ–ø–æ—Å—Ç–µ–π
        self.current_player_kingdom = player_kingdom  # –¢–µ–∫—É—â–µ–µ –∫–æ—Ä–æ–ª–µ–≤—Å—Ç–≤–æ –∏–≥—Ä–æ–∫–∞

        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–∞—Ä—Ç—ã
        self.base_map_width = 1200  # –ò—Å—Ö–æ–¥–Ω–∞—è —à–∏—Ä–∏–Ω–∞ –∫–∞—Ä—Ç—ã (px)
        self.base_map_height = 800  # –ò—Å—Ö–æ–¥–Ω–∞—è –≤—ã—Å–æ—Ç–∞ –∫–∞—Ä—Ç—ã (px)
        self.map_scale = self.calculate_scale()  # –ú–∞—Å—à—Ç–∞–± –ø–æ–¥ —Ç–µ–∫—É—â–∏–π —ç–∫—Ä–∞–Ω
        self.map_pos = self.calculate_centered_position()  # –¶–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –ø–æ–∑–∏—Ü–∏—è

        # –û—Ç—Ä–∏—Å–æ–≤–∫–∞ –∫–∞—Ä—Ç—ã
        with self.canvas:
            self.map_image = Rectangle(
                source='files/map/map.png',
                pos=self.map_pos,
                size=(self.base_map_width * self.map_scale, self.base_map_height * self.map_scale)
            )

        # –û—Ç—Ä–∏—Å–æ–≤–∫–∞ –≤—Å–µ—Ö –∫—Ä–µ–ø–æ—Å—Ç–µ–π –∏ –¥–æ—Ä–æ–≥
        self.draw_fortresses()
        self.draw_roads()

        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–∞–∂–¥—É—é —Å–µ–∫—É–Ω–¥—É
        Clock.schedule_interval(lambda dt: self.update_cities(), 1)

    def calculate_scale(self):
        """–†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç –º–∞—Å—à—Ç–∞–± –∫–∞—Ä—Ç—ã –ø–æ–¥ —Ç–µ–∫—É—â–∏–π —ç–∫—Ä–∞–Ω"""
        scale_width = Window.width / self.base_map_width
        scale_height = Window.height / self.base_map_height
        return min(scale_width, scale_height) * 0.9  # –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ–±–æ–ª—å—à–æ–π –æ—Ç—Å—Ç—É–ø

    def calculate_centered_position(self):
        """–í—ã—á–∏—Å–ª—è–µ—Ç —Ü–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—É—é –ø–æ–∑–∏—Ü–∏—é –∫–∞—Ä—Ç—ã"""
        scaled_width = self.base_map_width * self.map_scale
        scaled_height = self.base_map_height * self.map_scale
        x = (Window.width - scaled_width) / 2
        y = (Window.height - scaled_height) / 2
        return [x, y]

    def draw_roads(self):
        """–†–∏—Å—É–µ—Ç –¥–æ—Ä–æ–≥–∏ –º–µ–∂–¥—É –±–ª–∏–∂–∞–π—à–∏–º–∏ –≥–æ—Ä–æ–¥–∞–º–∏"""
        self.canvas.after.clear()

        try:
            cursor = self.conn.cursor()
            cursor.execute("SELECT fortress_name, coordinates FROM city")
            fortresses_data = cursor.fetchall()
        except sqlite3.Error as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö –æ –≥–æ—Ä–æ–¥–∞—Ö: {e}")
            return

        cities = []
        for fortress_name, coords_str in fortresses_data:
            try:
                coords = ast.literal_eval(coords_str)
                if len(coords) == 2:
                    cities.append((fortress_name, coords))
            except (ValueError, SyntaxError) as e:
                print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–∑–±–æ—Ä–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç –≥–æ—Ä–æ–¥–∞ '{fortress_name}': {e}")
                continue

        with self.canvas.after:
            Color(0.5, 0.5, 0.5, 1)  # –°–µ—Ä—ã–π —Ü–≤–µ—Ç –¥–ª—è –¥–æ—Ä–æ–≥

            for i in range(len(cities)):
                for j in range(i + 1, len(cities)):
                    source_name, source_coords = cities[i]
                    dest_name, dest_coords = cities[j]

                    # –í—ã—á–∏—Å–ª—è–µ–º —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ
                    total_diff = self.calculate_manhattan_distance(source_coords, dest_coords)

                    if total_diff < 224:  # –†–∏—Å—É–µ–º –¥–æ—Ä–æ–≥—É, –µ—Å–ª–∏ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ ‚â§ 220
                        # –í—ã—á–∏—Å–ª—è–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã —Å —É—á—ë—Ç–æ–º –º–∞—Å—à—Ç–∞–±–∞ –∏ –ø–æ–∑–∏—Ü–∏–∏
                        drawn_x1 = source_coords[0] * self.map_scale + self.map_pos[0]
                        drawn_y1 = source_coords[1] * self.map_scale + self.map_pos[1]
                        drawn_x2 = dest_coords[0] * self.map_scale + self.map_pos[0]
                        drawn_y2 = dest_coords[1] * self.map_scale + self.map_pos[1]

                        Line(points=[drawn_x1, drawn_y1, drawn_x2, drawn_y2], width=1)

    def calculate_manhattan_distance(self, source_coords, destination_coords):
        """–í—ã—á–∏—Å–ª—è–µ—Ç –º–∞–Ω—Ö—ç—Ç—Ç–µ–Ω—Å–∫–æ–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –º–µ–∂–¥—É —Ç–æ—á–∫–∞–º–∏"""
        return abs(source_coords[0] - destination_coords[0]) + abs(source_coords[1] - destination_coords[1])

    def draw_fortresses(self):
        """–†–∏—Å—É–µ—Ç –∫—Ä–µ–ø–æ—Å—Ç–∏ –Ω–∞ –∫–∞—Ä—Ç–µ"""
        self.fortress_rectangles.clear()
        self.canvas.clear()

        # –ü–µ—Ä–µ—Ä–∏—Å–æ–≤—ã–≤–∞–µ–º –∫–∞—Ä—Ç—É
        with self.canvas:
            self.map_image = Rectangle(
                source='files/map/map.png',
                pos=self.map_pos,
                size=(self.base_map_width * self.map_scale, self.base_map_height * self.map_scale)
            )

            # –°–ª–æ–≤–∞—Ä—å —Ñ—Ä–∞–∫—Ü–∏–π –∏ –∏—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
            faction_images = {
                '–•–∏–ø–µ—Ä–∏–æ–Ω': 'files/buildings/giperion.png',
                '–ê—Ä–∫–∞–¥–∏—è': 'files/buildings/arkadia.png',
                '–°–µ–ª–µ—Å—Ç–∏—è': 'files/buildings/celestia.png',
                '–≠—Ç–µ—Ä–∏—è': 'files/buildings/eteria.png',
                '–•–∞–ª–∏–¥–æ–Ω': 'files/buildings/halidon.png'
            }

            try:
                cursor = self.conn.cursor()
                cursor.execute("SELECT fortress_name, kingdom, coordinates FROM city")
                fortresses_data = cursor.fetchall()
            except sqlite3.Error as e:
                print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö –æ –≥–æ—Ä–æ–¥–∞—Ö: {e}")
                return

            if not fortresses_data:
                print("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –≥–æ—Ä–æ–¥–∞—Ö –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.")
                return

            # –†–∏—Å—É–µ–º –∫—Ä–µ–ø–æ—Å—Ç–∏
            for fortress_name, kingdom, coords_str in fortresses_data:
                try:
                    coords = ast.literal_eval(coords_str)
                    if len(coords) == 2:
                        fort_x, fort_y = coords
                    else:
                        continue
                except (ValueError, SyntaxError) as e:
                    print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–∑–±–æ—Ä–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç –≥–æ—Ä–æ–¥–∞ '{fortress_name}': {e}")
                    continue

                # –í—ã—á–∏—Å–ª—è–µ–º –ø–æ–∑–∏—Ü–∏—é —Å —É—á—ë—Ç–æ–º –º–∞—Å—à—Ç–∞–±–∞
                drawn_x = fort_x * self.map_scale + self.map_pos[0]
                drawn_y = fort_y * self.map_scale + self.map_pos[1]

                # –ü–æ–ª—É—á–∞–µ–º –ø—É—Ç—å –∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é
                image_path = faction_images.get(kingdom, 'files/buildings/default.png')
                if not os.path.exists(image_path):
                    image_path = 'files/buildings/default.png'

                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –æ –∫—Ä–µ–ø–æ—Å—Ç–∏
                fort_rect = (drawn_x, drawn_y, 77, 77)
                self.fortress_rectangles.append((
                    fort_rect,
                    {"coordinates": (fort_x, fort_y), "name": fortress_name},
                    kingdom
                ))

                # –†–∏—Å—É–µ–º –∫—Ä–µ–ø–æ—Å—Ç—å
                Rectangle(source=image_path, pos=(drawn_x, drawn_y), size=(77, 77))

                # –î–æ–±–∞–≤–ª—è–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞
                display_name = fortress_name[:20] + "..." if len(fortress_name) > 20 else fortress_name
                label = CoreLabel(text=display_name, font_size=25, color=(0, 0, 0, 1))
                label.refresh()
                text_texture = label.texture
                text_width, text_height = text_texture.size
                text_x = drawn_x + (40 - text_width) / 2
                text_y = drawn_y - text_height - 5

                Color(1, 1, 1, 1)
                Rectangle(texture=text_texture, pos=(text_x, text_y), size=(text_width, text_height))

    def check_fortress_click(self, touch):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–∂–∞—Ç–∏–µ –Ω–∞ –∫—Ä–µ–ø–æ—Å—Ç—å"""
        for fort_rect, fortress_data, owner in self.fortress_rectangles:
            x, y, w, h = fort_rect
            if x <= touch.x <= x + w and y <= touch.y <= y + h:
                save_last_clicked_city(fortress_data["name"])
                popup = FortressInfoPopup(
                    ai_fraction=owner,
                    city_coords=fortress_data["coordinates"],
                    player_fraction=self.current_player_kingdom
                )
                popup.open()
                print(
                    f"–ö—Ä–µ–ø–æ—Å—Ç—å {fortress_data['coordinates']} –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç {'–≤–∞—à–µ–º—É' if owner == self.current_player_kingdom else '—á—É–∂–æ–º—É'} –∫–æ—Ä–æ–ª–µ–≤—Å—Ç–≤—É!")
                break

    def on_touch_up(self, touch):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–∞—Ä—Ç—É"""
        self.check_fortress_click(touch)

    def update_cities(self):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≥–æ—Ä–æ–¥–æ–≤"""
        self.canvas.clear()
        self.draw_fortresses()


class RoundedButton(Button):
    instances = []  # –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –∫–Ω–æ–ø–æ–∫

    def __init__(self, bg_color=(0.1, 0.5, 0.9, 1), radius=25, **kwargs):
        super().__init__(**kwargs)
        self.bg_color = bg_color
        self.radius = radius
        self.background_color = (0, 0, 0, 0)  # –û—Ç–∫–ª—é—á–∞–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π —Ñ–æ–Ω
        self.active = False  # –°–æ—Å—Ç–æ—è–Ω–∏–µ –∫–Ω–æ–ø–∫–∏: –∞–∫—Ç–∏–≤–Ω–∞ –ª–∏ –æ–Ω–∞
        self.darken_factor = 0.8  # –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –∑–∞—Ç–µ–º–Ω–µ–Ω–∏—è

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Å—Ç–∞–Ω—Å –∫–Ω–æ–ø–∫–∏
        RoundedButton.instances.append(self)

        with self.canvas.before:
            self.rect_color = Color(*self.bg_color)
            self.rect = RoundedRectangle(
                pos=self.pos,
                size=self.size,
                radius=[radius]
            )

        self.bind(pos=self.update_rect, size=self.update_rect)

    def update_rect(self, *args):
        self.rect.pos = self.pos
        self.rect.size = self.size

    def darken_color(self, color, factor):
        return [c * factor for c in color[:3]] + list(color[3:])

    def on_press(self):
        # –°–æ–æ–±—â–∞–µ–º –≤—Å–µ–º –∫–Ω–æ–ø–∫–∞–º, —á—Ç–æ —ç—Ç–∞ –∞–∫—Ç–∏–≤–Ω–∞
        self.set_active_button(self)

    def deactivate(self):
        self.active = False
        self.rect_color.rgba = self.bg_color

    def activate(self):
        self.active = True
        self.rect_color.rgba = self.darken_color(self.bg_color, self.darken_factor)

    @classmethod
    def set_active_button(cls, active_button):
        for btn in cls.instances:
            if btn == active_button:
                btn.activate()
            else:
                btn.deactivate()

class MenuWidget(FloatLayout):
    def __init__(self, **kwargs):
        super(MenuWidget, self).__init__(**kwargs)

        # –§–æ–Ω
        self.bg_image_1 = Image(source='files/menu/arkadia.jpg', allow_stretch=True, keep_ratio=False)
        self.bg_image_2 = Image(source='files/menu/celestia.jpg', allow_stretch=True, keep_ratio=False, opacity=0)
        self.add_widget(self.bg_image_1)
        self.add_widget(self.bg_image_2)

        # –õ–æ–≥–æ—Ç–∏–ø
        self.title_label = Label(
            text="–õ—ç—Ä–¥–æ–Ω",
            font_size='48sp',
            bold=True,
            color=(1, 1, 1, 1),
            outline_color=(0, 0, 0, 1),
            outline_width=2,
            halign='center',
            valign='middle',
            size_hint=(0.6, 0.3),
            pos_hint={'center_x': 0.5, 'top': 0.98},
            markup=True
        )
        self.add_widget(self.title_label)

        # –ö–Ω–æ–ø–∫–∏ (–∏–∑–Ω–∞—á–∞–ª—å–Ω–æ –≤–Ω–µ —ç–∫—Ä–∞–Ω–∞)
        self.btn_start_game = RoundedButton(
            text="–í –õ—ç—Ä–¥–æ–Ω",
            size_hint=(0.4, 0.08),
            pos=(-400, Window.height * 0.68),
            background_normal='',
            background_color=(0, 0, 0, 0),
            color=(1, 1, 1, 1),
            font_size='20sp'
        )
        self.btn_how_to_play = RoundedButton(
            text="–ö–∞–∫ –∏–≥—Ä–∞—Ç—å",
            size_hint=(0.4, 0.08),
            pos=(-400, Window.height * 0.53),
            background_normal='',
            background_color=(0, 0, 0, 0),
            color=(1, 1, 1, 1),
            font_size='20sp'
        )
        self.btn_exit = RoundedButton(
            text="–í—ã—Ö–æ–¥",
            size_hint=(0.4, 0.08),
            pos=(-400, Window.height * 0.38),
            background_normal='',
            background_color=(0, 0, 0, 0),
            color=(1, 1, 1, 1),
            font_size='20sp'
        )

        # –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ–º –¥–µ–π—Å—Ç–≤–∏—è
        self.btn_start_game.bind(on_press=self.start_game)
        self.btn_how_to_play.bind(on_press=self.open_how_to_play)
        self.btn_exit.bind(on_press=self.exit_game)

        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –Ω–∞ —ç–∫—Ä–∞–Ω
        self.add_widget(self.btn_start_game)
        self.add_widget(self.btn_how_to_play)
        self.add_widget(self.btn_exit)

        # –ê–Ω–∏–º–∞—Ü–∏—è –ø–æ—è–≤–ª–µ–Ω–∏—è –∫–Ω–æ–ø–æ–∫
        Clock.schedule_once(self.animate_buttons_in, 0.5)

        # –ê–Ω–∏–º–∞—Ü–∏—è —Ñ–æ–Ω–∞
        self.current_image = self.bg_image_1
        self.next_image = self.bg_image_2
        Clock.schedule_interval(self.animate_background, 5)

    def animate_buttons_in(self, dt):
        # –ê–Ω–∏–º–∞—Ü–∏—è: –∫–Ω–æ–ø–∫–∏ –≤—ã–µ–∑–∂–∞—é—Ç —Å –ª–µ–≤–æ–π —Å—Ç–æ—Ä–æ–Ω—ã
        anim1 = Animation(x=Window.width * 0.5 - self.btn_start_game.width / 2, y=Window.height * 0.68, duration=0.6, t='out_back')
        anim2 = Animation(x=Window.width * 0.5 - self.btn_how_to_play.width / 2, y=Window.height * 0.53, duration=0.6, t='out_back')
        anim3 = Animation(x=Window.width * 0.5 - self.btn_exit.width / 2, y=Window.height * 0.38, duration=0.6, t='out_back')

        anim1.start(self.btn_start_game)
        anim2.start(self.btn_how_to_play)
        anim3.start(self.btn_exit)

    def animate_background(self, dt):
        new_source = random.choice([
            'files/menu/arkadia.jpg',
            'files/menu/celestia.jpg',
            'files/menu/eteria.jpg',
            'files/menu/halidon.jpg',
            'files/menu/giperion.jpg'
        ])
        while new_source == self.next_image.source:
            new_source = random.choice([
                'files/menu/arkadia.jpg',
                'files/menu/celestia.jpg',
                'files/menu/eteria.jpg',
                'files/menu/halidon.jpg',
                'files/menu/giperion.jpg'
            ])
        self.next_image.source = new_source
        fade_out = Animation(opacity=0, duration=1.5)
        fade_in = Animation(opacity=1, duration=1.5)
        fade_out.start(self.current_image)
        fade_in.start(self.next_image)
        self.current_image, self.next_image = self.next_image, self.current_image

    def open_how_to_play(self, instance):
        app = App.get_running_app()
        app.root.clear_widgets()
        app.root.add_widget(HowToPlayScreen())

    def start_game(self, instance):
        app = App.get_running_app()
        app.root.clear_widgets()
        app.root.add_widget(KingdomSelectionWidget())

    def exit_game(self, instance):
        App.get_running_app().stop()

# –í–∫–ª–∞–¥–∫–∞ –æ–±—É—á–µ–Ω–∏—è
class HowToPlayScreen(FloatLayout):
    def __init__(self, **kwargs):
        super(HowToPlayScreen, self).__init__(**kwargs)
        # –§–æ–Ω
        self.add_widget(Image(source='files/menu/how_to_play_bg.jpg', allow_stretch=True, keep_ratio=False))

        # –ü–∞–Ω–µ–ª—å –≤–∫–ª–∞–¥–æ–∫
        self.tab_panel = TabbedPanel(
            do_default_tab=False,
            size_hint=(0.8, 0.6),
            pos_hint={'center_x': 0.5, 'center_y': 0.5}
        )

        # === –í–∫–ª–∞–¥–∫–∞ "–≠–∫–æ–Ω–æ–º–∏–∫–∞" ===
        economy_content = self.create_scrollable_content([
            {"type": "text", "content": "–≠–∫–æ–Ω–æ–º–∏–∫–∞....–≤—Å–º—ã—Å–ª–µ –Ω–∞–ª–æ–≥–∏ –≤—ã—Å–æ–∫–∏–µ? –ø–ª–∞—Ç–∏ –¥–∞–≤–∞–π\n\n"
                                        "–ü–µ—Ä–≤–æ–µ –∏ –≥–ª–∞–≤–Ω–æ–µ —á—Ç–æ –Ω—É–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å –Ω–∞ –ø–µ—Ä–≤–æ–º –∂–µ —Ö–æ–¥—É ‚Äî —ç—Ç–æ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å "
                                        "—Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ –ø–æ—Å—Ç—Ä–æ–µ–∫ –º–µ–∂–¥—É –±–æ–ª—å–Ω–∏—Ü–∞–º–∏ –∏ —Ñ–∞–±—Ä–∏–∫–∞–º–∏.\n"
                                        "–û–Ω–∏ –æ—á–µ–Ω—å —Å–∏–ª—å–Ω–æ –≤–ª–∏—è—é—Ç –Ω–∞ —ç–∫–æ–Ω–æ–º–∏–∫—É –∏ –¥–∞–ª—å–Ω–µ–π—à–µ–µ —Ä–∞–∑–≤–∏—Ç–∏–µ. "
                                        "–≠–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–∏—Ä—É–π—Ç–µ —Å —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ–º —Ç–æ–ª—å–∫–æ —Ç–æ–≥–¥–∞, –∫–æ–≥–¥–∞ —É–∂–µ –Ω–∞—É—á–∏–ª–∏—Å—å –∏–≥—Ä–∞—Ç—å.\n\n"
                                        "–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ –¥–ª—è –≤—Å–µ—Ö —Ñ—Ä–∞–∫—Ü–∏–π ‚Äî —ç—Ç–æ 2 –±–æ–ª—å–Ω–∏—Ü—ã –Ω–∞ 1 —Ñ–∞–±—Ä–∏–∫—É. –¢–∞–∫–æ–µ "
                                        "—Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ –Ω–∏–∫–æ–≥–¥–∞ –Ω–µ –ø—Ä–∏–≤–µ–¥—ë—Ç –∫ —Å–∏–ª—å–Ω–æ–º—É —É–ø–∞–¥–∫—É —ç–∫–æ–Ω–æ–º–∏–∫–∏ –Ω–∞ —Å—Ç–∞—Ä—Ç–µ, "
                                        "–∞ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ–∫ –∫—Ä–æ–Ω –º–æ–∂–Ω–æ –∫–æ–º–ø–µ–Ω—Å–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ–¥–∞–≤ —Å—ã—Ä—å—ë –Ω–∞ —Ä—ã–Ω–∫–µ(–≤–∫–ª–∞–¥–∫–∞ —Ç–æ—Ä–≥–æ–≤–ª—è —Ç—É—Ç –∂–µ)."},
            {"type": "image", "source": "files/menu/tutorial/economy_1.jpg"},
            {"type": "text", "content": "–¢–∞–∫ –∂–µ —Å—Ç–æ–∏—Ç —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å—Ä–∞–∑—É –Ω–∞–ª–æ–≥–∏(–Ω–∞ –ø—Ä–æ–¥–∞–∂–µ —Å—ã—Ä—å—è –ø–æ–∫–∞ –µ–≥–æ –º–∞–ª–æ, –¥–∞–ª–µ–∫–æ "
                                        "–Ω–µ —É–µ–¥–µ—à—å, –∞ –≤—Ä–∞–≥ –Ω–µ –¥—Ä–µ–º–ª–µ—Ç) –ò—Ç–∞–∫ —Ä–µ–∫–æ–º–µ–Ω–¥—É—é 34% –Ω–∞–ª–æ–≥–∞.(—Ä–∞–∑–º–µ—Ä –Ω–∞–ª–æ–≥–∞ "
                                        "–≤–ª–∏—è–µ—Ç –Ω–∞ —Ç–æ –ª—é–±–∏—Ç –≤–∞—Å –Ω–∞—Å–µ–ª–µ–Ω–∏–µ –∏–ª–∏ –Ω–µ—Ç(–±—É–¥–µ—Ç –æ—Ç –≤–∞—Å —É–±–µ–≥–∞—Ç—å –∏–ª–∏ –Ω–∞–æ–±–æ—Ä–æ—Ç "
                                        "–ø—Ä–∏–±—ã–≤–∞—Ç—å)) –ï—Å–ª–∏ –≤—ã—Å—Ç–∞–≤–∏—Ç—å —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–∏–µ –Ω–∞–ª–æ–≥–∏ –≤—Å–µ —Ä–∞–∑–±–µ–≥—É—Ç—Å—è –∏ –í–∞—à–µ –≥–æ—Å—É–¥–∞—Ä—Å—Ç–≤–æ –ø—Ä–µ–∫—Ä–∞—Ç–∏—Ç —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ(–í—ã –ø—Ä–æ–∏–≥—Ä–∞–µ—Ç–µ))"},
            {"type": "image", "source": "files/menu/tutorial/economy_2.jpg"},
            {"type": "text", "content": "* –î–ª—è –±–æ–ª–µ–µ –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± —ç–∫–æ–Ω–æ–º–∏–∫–µ –∏–≥—Ä—ã –ø–æ—Å–µ—Ç–∏—Ç–µ —Ä–∞–∑–¥–µ–ª —Å—Ö–µ–º–∞"}
        ])

        # === –í–∫–ª–∞–¥–∫–∞ "–ê—Ä–º–∏—è" ===
        army_content = self.create_scrollable_content([
            {"type": "text", "content": "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞—Ä–º–∏–µ–π ‚Äî –∫–∞–∫–æ–π –¥–µ–±–∏–ª –Ω–∞—Å —Å—é–¥–∞ –ø–æ—Å–ª–∞–ª...\n\n"
                                        "–ù–∞—á–Ω–µ–º —Å —Ç–æ–≥–æ —á—Ç–æ –Ω–∞–±–∏—Ä–∞—Ç—å —é–Ω–∏—Ç–æ–≤ –ø–æ –ø—Ä–∏–Ω—Ü–∏–ø—É —á–µ–º –±–æ–ª—å—à–µ —Ç–µ–º –ª—É—á—à–µ -> –ø–ª–æ—Ö–∞—è –∏–¥–µ—è.\n"
                                        "–ó–∞–±–æ—Ç–∏—Ç–µ—Å—å –æ –∫–∞—á–µ—Å—Ç–≤–µ –≤–∞—à–µ–π –∞—Ä–º–∏–∏, –∞ –Ω–µ –æ –µ–µ —á–∏—Å–ª–µ–Ω–Ω–æ—Å—Ç–∏. –ò–Ω–∞—á–µ —Å–æ–∂—Ä—É—Ç –ª–∏–º–∏—Ç, –∞ —Ç–æ–ª–∫—É –º–∞–ª–æ\n"
                                        "–ò—Ç–∞–∫ –±–∞–∑–æ–≤—ã–µ –º–æ–º–µ–Ω—Ç—ã, –≤ –∏–≥—Ä–µ –µ—Å—Ç—å –∞—Ç–∞–∫—É—é—â–∏–µ —é–Ω–∏—Ç—ã –∏ –∑–∞—â–∏—Ç–Ω—ã–µ.(–æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç—Å—è –ø–æ —Ç–µ–∫—É—â–∏–º —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞–º —é–Ω–∏—Ç–∞)"},
            {"type": "image", "source": "files/menu/tutorial/army_1.jpg"},
            {"type": "text", "content": "–ù–∞ –ø—Ä–∏–º–µ—Ä–µ –≤—ã—à–µ –≤–∏–¥–Ω–æ, –∫–∞–∫ –≤—ã–≥–ª—è–¥–∏—Ç –∫–∞—Ä—Ç–æ—á–∫–∞ —é–Ω–∏—Ç–∞.\n"
                                        "–ü—Ä–æ–±–µ–∂–∏–º—Å—è –ø–æ –∫–ª—é—á–µ–≤—ã–º –º–æ–º–µ–Ω—Ç–∞–º:\n"
                                        "\n"
                                        "–£—Ä–æ–Ω - –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤—É–µ—Ç —Å –∫–ª–∞—Å—Å–æ–º —é–Ω–∏—Ç–∞(—á–µ–º –≤—ã—à–µ –∫–ª–∞—Å—Å —Ç–µ–º –≤—ã—à–µ —É—Ä–æ–Ω(–¥–æ–ø. "
                                        "–∫–æ—ç—Ñ–∏—Ü–∏–µ–Ω—Ç —É–≤–µ–ª–∏—á–µ–Ω–∏—è —É—Ä–æ–Ω–∞)) - —É—á–∏—Ç—ã–≤–∞–µ—Ç—Å—è –ø—Ä–∏ –∞—Ç–∞–∫–µ –Ω–∞ –≥–æ—Ä–æ–¥ –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–∞\n"
                                        "\n"
                                        "–ó–∞—â–∏—Ç–∞ - —É—á–∏—Ç—ã–≤–∞–µ—Ç—Å—è –ø—Ä–∏ –∑–∞—â–∏—Ç–µ –≥–æ—Ä–æ–¥–∞ –∏ —Å–∫–ª–∞–¥—ã–≤–∞–µ—Ç—Å—è —Å –ñ–∏–≤—É—á–µ—Å—Ç—å—é, —É–≤–µ–ª–∏—á–∏–≤–∞—è –ø–∞—Ä–∞–º–µ—Ç—Ä –∑–∞—â–∏—Ç—ã.\n"
                                        "\n"
                                        "–ö–ª–∞—Å—Å - —É–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç –±–∞–∑–æ–≤—ã–π —É—Ä–æ–Ω —é–Ω–∏—Ç–∞ –∏ –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç –æ—á–µ—Ä–µ–¥–Ω–æ—Å—Ç—å –≤—Å—Ç—É–ø–∞–Ω–∏—è –≤ –±–æ–π.\n"
                                        "–ü–µ—Ä–≤—ã–º–∏ –≤ –±–æ–π –≤—Å—Ç—É–ø–∞—é—Ç —Å–∞–º—ã–µ –º–ª–∞–¥—à–∏–µ –∫–ª–∞—Å—Å—ã –≥–æ—Ä–æ–¥–∞(1 —Å–∞–º—ã–π –º–ª–∞–¥—à–∏–π 5 —Å–∞–º—ã–π —Å—Ç–∞—Ä—à–∏–π –≤ –∏–≥—Ä–µ).\n"
                                        "–ï—Å–ª–∏ —É —Ç–µ–±—è –≤ –≥–∞—Ä–Ω–∏–∑–æ–Ω–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ —é–Ω–∏—Ç–æ–≤ —Å –æ–¥–∏–Ω–∞–∫–æ–≤—ã–º –∫–ª–∞—Å—Å–æ–º —Ç–æ –ø–µ—Ä–≤—ã–π –≤ –±–æ–π –≤—Å—Ç—É–ø–∞–µ—Ç —Ç–æ—Ç —É –∫–æ—Ç–æ—Ä–æ–≥–æ –±–æ–ª—å—à–µ —É—Ä–æ–Ω\n"
                                        "–¢–∞–∫–∏–º –æ–±—Ä–∞–∑–æ–º –Ω—É–∂–Ω–æ —É—á–∏—Ç—ã–≤–∞—Ç—å —ç—Ç–æ –ø—Ä–∏ –∞—Ç–∞–∫–µ –∏–ª–∏ –∑–∞—â–∏—Ç–µ –≥–æ—Ä–æ–¥–∞(–±—É–¥—É—Ç –ª–∏ "
                                        "–∑–∞—â–∏—Ç–Ω—ã–µ —é–Ω–∏—Ç—ã –∑–∞—â–∏—â–∞—Ç—å –∞—Ç–∞–∫—É—é—â–∏—Ö —é–Ω–∏—Ç–æ–≤ –≥–∞—Ä–Ω–∏–∑–æ–Ω–∞ –ø—Ä–∏ –æ—Ç—Ä–∞–∂–µ–Ω–∏–∏ –∞—Ç–∞–∫–∏ "
                                        "–≤—Ä–∞–≥–∞? –ò –∫—Ç–æ –ø–µ—Ä–≤—ã–º –±—É–¥–µ—Ç "
                                        "–∞—Ç–∞–∫–æ–≤–∞—Ç—å –≤—Ä–∞–≥–∞ –≤ –≥–æ—Ä–æ–¥–µ? –Ω–µ –¥–∞–π –±–æ–≥ —ç—Ç–æ –±—É–¥—É—Ç –∑–∞—â–∏—Ç–Ω—ã–µ —é–Ω–∏—Ç—ã –æ–Ω–∏ —Ç–∞–º "
                                        "–ø–æ–ª—è–≥—É—Ç –≤—Å–µ)"
                                        "\n"
                                        "–ù–∏–∂–µ —Ä–∞—Å—Å–º–æ—Ç—Ä–∏–º –∫–∞–∫ —É–ø—Ä–∞–≤–ª—è—Ç—å –∞—Ä–º–∏–µ–π"},
            {"type": "image", "source": "files/menu/tutorial/army_2.jpg"},
            {"type": "text", "content": "–ü–æ—Å–ª–µ —Ç–æ–≥–æ –∫–∞–∫ —Ç—ã –Ω–∞–±—Ä–∞–ª —é–Ω–∏—Ç–æ–≤, –º–æ–∂–µ—à—å –∏—Ö —Ä–∞–∑–º–µ—Å—Ç–∏—Ç—å –≤ –æ–¥–Ω–æ–º –∏–∑ –≥–æ—Ä–æ–¥–æ–≤ \n"
                                        "–†–∞–∑–º–µ—Å—Ç–∏—Ç—å –∞—Ä–º–∏—é - —ç—Ç–æ –∫–∞–∫ —Ä–∞–∑ —Ç–∞ –∫–Ω–æ–ø–∫–∞ –∫–æ—Ç–æ—Ä–∞—è —Ä–∞–∑–º–µ—â–∞–µ—Ç –≤–æ–π—Å–∫–∞ –≤ –≥–æ—Ä–æ–¥–µ \n"
                                        "–í–≤–µ—Å—Ç–∏ –≤–æ–π—Å–∫–∞ - —ç—Ç–æ –æ—Ç–ø—Ä–∞–≤–∫–∞ –≤–æ–π—Å–∫ –∏–∑ –¥—Ä—É–≥–∏—Ö –≥–æ—Ä–æ–¥–æ–≤(—Ç–æ –µ—Å—Ç—å —É–∂–µ —Ä–∞–∑–º–µ—â–µ–Ω–Ω—ã–µ –≤–æ–π—Å–∫–∞) –≤ —Ç–µ–∫—É—â–∏–π \n"
                                        "–•–æ—á–µ—à—å –Ω–∞–ø–∞—Å—Ç—å? –ù–∞–∂–∏–º–∞–π –≤–≤–µ—Å—Ç–∏ –≤–æ–π—Å–∫–∞ –∏ –≤—ã–±–∏—Ä–∞–π –¥–∞–ª–µ–µ –∫–µ–º —Ö–æ—á–µ—à—å –Ω–∞–ø–∞—Å—Ç—å. "
                                        "–í–∞–∂–Ω–æ! –ü–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –≥—Ä—É–ø–ø–∞–º–∏\n"
                                        "–¢–æ –µ—Å—Ç—å —Ç—ã –¥–æ–ª–∂–µ–Ω –∫–∞–∫ –±—ã—Ç—å '–ù–∞–±—Ä–∞—Ç—å –≥—Ä—É–ø–ø—É –∏–∑ —é–Ω–∏—Ç–æ–≤' —ç—Ç–æ –º–æ–∂–µ—Ç –±—ã—Ç—å –¥–∞–∂–µ "
                                        "–æ–¥–∏–Ω —é–Ω–∏—Ç –∏ –¥–∞–ª–µ–µ —Ç—ã –æ—Ç–ø—Ä–∞–≤–ª—è–µ—à—å –≥—Ä—É–ø–ø—É –≤ —Ç–µ–∫—É—â–∏–π –≥–æ—Ä–æ–¥\n"
                                        "—Ç–æ–∂–µ —Å–∞–º–æ–µ –µ—Å–ª–∏ —Ç—ã —Ö–æ—á–µ—à—å –ø–µ—Ä–µ–±–∞–∑–∏—Ä–æ–≤–∞—Ç—å –≤–æ–π—Å–∫–∞ –∏–∑ –æ–¥–Ω–æ–≥–æ –≥–æ—Ä–æ–¥–∞ –≤ –¥—Ä—É–≥–æ–π \n"
                                        "–ö–õ–Æ–ß–ï–í–û–ï –ß–¢–û –ù–ê–î–û –£–ß–ò–¢–´–í–ê–¢–¨ –£ –¢–ï–ë–Ø –í–°–ï–ì–û –û–î–ù–û –ü–ï–†–ï–ú–ï–©–ï–ù–ò–ï –ù–ê –•–û–î! \n"
                                        "–ï—Å–ª–∏ –Ω–∞–ø–∞–ª –Ω–∞ –≤—Ä–∞–≥–∞ - —Ç—ã –∏–∑—Ä–∞—Å—Ö–æ–¥–æ–≤–∞–ª –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ \n"
                                        "–ï—Å–ª–∏ –ø–µ—Ä–µ–≤–µ–ª –≤–æ–π—Å–∫–∞ –∏–∑ –æ–¥–Ω–æ–≥–æ —Å–≤–æ–µ–≥–æ –≥–æ—Ä–æ–¥–∞ –≤ –¥—Ä—É–≥–æ–π - —Ç—ã –∏–∑—Ä–∞—Å—Ö–æ–¥–æ–≤–∞–ª –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ \n"
                                        "–ê—Ç–∞–∫–∞ –Ω–∞ –≥–æ—Ä–æ–¥ –≤—Ä–∞–≥–∞ –ø—Ä–æ–≤–∞–ª–∏–ª–∞—Å—å? - —Ç—ã –∏–∑—Ä–∞—Å—Ö–æ–¥–æ–≤–∞–ª –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ \n"
                                        "\n"
                                        "–ù–µ –º–∞–ª–æ–≤–∞–∂–Ω—ã–π –º–æ–º–µ–Ω—Ç –∏–º–µ–µ—Ç –ª–æ–≥–∏—Å—Ç–∏–∫–∞, —Ç—ã –Ω–µ –º–æ–∂–µ—à—å –Ω–∞–ø–∞–¥–∞—Ç—å –Ω–∞ –ª—é–±–æ–π –≥–æ—Ä–æ–¥ –Ω–∞ –∫–∞—Ä—Ç–µ –∏–∑ –ª—é–±–æ–π —Ç–æ—á–∫–∏, —Ç–æ–ª—å–∫–æ –≤ –±–ª–∏–∂–∞–π—à–∏–π \n"
                                        "–ù–û –µ—Å–ª–∏ —Ç—ã –ø–µ—Ä–µ–º–µ—â–∞–µ—à—å –≤–æ–π—Å–∫–∞ –º–µ–∂–¥—É —Å–≤–æ–∏–º–∏ –≥–æ—Ä–æ–¥–∞–º–∏ —Ç–æ —Ç—É—Ç –ª–æ–≥–∏—Å—Ç–∏–∫–∞ –Ω–µ –∏–º–µ–µ—Ç –∑–Ω–∞—á–µ–Ω–∏—è,"
                                        " —Ç—ã –º–æ–º–µ–Ω—Ç–∞–ª—å–Ω–æ –º–æ–∂–µ—à—å –ø–µ—Ä–µ–º–µ—Å—Ç–∏—Ç—å –≤–æ–π—Å–∫–∞ –∏–∑ –æ–¥–Ω–æ–π —á–∞—Å—Ç–∏ –∫–∞—Ä—Ç—ã –≤ –¥—Ä—É–≥—É—é \n"
                                        "\n"
                                        "–ë—É–¥—å –æ—Å—Ç–æ—Ä–æ–∂–µ–Ω –∏–≥—Ä–æ–∫! –ò –ø–æ–º–Ω–∏ –≤—Å—è —Ç–≤–æ—è –Ω–∞–≤–æ–µ–≤–∞–Ω–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —É—á–∏—Ç—ã–≤–∞–µ—Ç—Å—è –≤ —Ñ–∏–Ω–∞–ª—å–Ω–æ–º –æ—Ç—á–µ—Ç–µ!"}
        ])

        # === –í–∫–ª–∞–¥–∫–∞ "–ü–æ–ª–∏—Ç–∏–∫–∞" ===
        politics_content = self.create_scrollable_content([
            {"type": "text", "content": "–ü–æ–ª–∏—Ç–∏–∫–∞...—á–µ –≤—ã –Ω–∞—á–∏–Ω–∞–µ—Ç–µ? –Ω–æ—Ä–º–∞–ª—å–Ω–æ –∂–µ –æ–±—â–∞–ª–∏—Å—å!.\n\n"
                                        "–ò—Ç–∞–∫ –ø–µ—Ä–≤–æ–µ —á—Ç–æ –Ω–∞–¥–æ —Å–¥–µ–ª–∞—Ç—å –Ω–∞ –ø–µ—Ä–≤–æ–º –∂–µ —Ö–æ–¥—É –≤—ã—è—Å–Ω–∏—Ç—å –∫—Ç–æ —Ç—ã –ö–æ–º–º—É–Ω–∏—Å—Ç –∏–ª–∏ "
                                        "–ö–∞–ø–∏—Ç–∞–ª–∏—Å—Ç?.\n"
             },
            {"type": "image", "source": "files/menu/tutorial/politic_1.jpg"},
            {"type": "text", "content": "–¢–∞–º –≤—ã–±–∏—Ä–∞–µ–º –ø–æ–ª–∏—Ç. —Å—Ç—Ä–æ–π –∏ –≤–∏–¥–∏–º:"},
            {"type": "image", "source": "files/menu/tutorial/politic_2.jpg"},
            {"type": "text", "content": "–ö–æ–º–º—É–Ω–∏—Å—Ç - —É–≤–µ–ª–∏—á–µ–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞ —Å—ã—Ä—å—è (–Ω–∞ —Å–∞–º–æ–º –¥–µ–ª–µ –±–∞—Ñ—Ñ/–¥—ç–±–∞—Ñ—Ñ, "
                                        "–µ—Å–ª–∏ –∏–¥–µ—à—å –≤ –º–∏–Ω—É—Å —Ç–æ —ç—Ç–æ –¥–æ–±–∞–≤–∏—Ç —Å–≤–µ—Ä—Ö—É)\n"
                                        "–ö–∞–ø–∏—Ç–∞–ª–∏—Å—Ç - —É–≤–µ–ª–∏—á–µ–Ω–∏–µ —É—Ä–æ–≤–Ω—è –¥–æ—Ö–æ–¥–∞ –∫—Ä–æ–Ω (—Ç–∞ –∂–µ —Ö–µ—Ä–Ω—è, –Ω–µ —É–¥–∏–≤–ª—è–π—Å—è "
                                        "–æ—Ç–∫—É–¥–∞ —É —Ç–µ–±—è —Ç–∞–∫–æ–π –º–∏–Ω—É—Å –≤ –¥–µ–Ω—å–≥–∞—Ö –ø—Ä–∏ –∫–∞–ø–∏—Ç–∞–ª–∏–∑–º–µ –µ—Å–ª–∏ –¥–æ—Ö–æ–¥—ã "
                                        "–æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–µ)\n"
                                        "–ù—É –∏ –º–æ–µ –ª—é–±–∏–º–æ–µ, –æ–¥–Ω–∏ –Ω–µ–Ω–∞–≤–∏–¥—è—Ç –¥—Ä—É–≥–∏—Ö, –∞ –∑–Ω–∞—á–∏—Ç —Ä–∞–Ω–æ –∏–ª–∏ –ø–æ–∑–¥–Ω–æ –¥–∞–¥—É—Ç –¥—Ä—É–≥ "
                                        "–¥—Ä—É–≥ –≤ —Ä–µ–ø—É. \n"
                                        "–ü—Ä–∏ —ç—Ç–æ–º —Ç—ã –≤—Å–µ–≥–¥–∞ –º–æ–∂–µ—à—å '–ø–µ—Ä–µ–æ–±—É—Ç—å—Å—è', –≤–∏–¥–∏—à—å –∫–∞–∫ —Ç–≤–æ–∏—Ö –¥—Ä—É–∑–µ–π —É–Ω–∏—á—Ç–æ–∂–∞—é—Ç "
                                        "–∫–∞–ø–∏—Ç–∞–ª–∏—Å—Ç—ã? –ù—É —á—Ç–æ –∂ —Ç–µ–ø–µ—Ä—å —è —Ç–æ–∂–µ –∫–∞–ø–∏—Ç–∞–ª–∏—Å—Ç –∏ –Ω–∞–æ–±–æ—Ä–æ—Ç. \n"
                                        "–ß—Ç–æ–±—ã —Ç–µ–±–µ –∑–∞—Ö–æ—Ç–µ–ª–∏ –Ω–∞–±–∏—Ç—å –ª–∏—Ü–æ —É —Ç–µ–±—è –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å \n"
                                        "1. –ü–ª–æ—Ö–∏–µ –æ—Ç–Ω–æ—à–µ–Ω–∏—è —Å –Ω–∏–º–∏, –≤–æ–∑–º–æ–∂–Ω–æ –ø–æ—Ç–æ–º—É —á—Ç–æ —Ç—ã –∏–∑ –¥—Ä—É–≥–æ–≥–æ '–ª–∞–≥–µ—Ä—è'(–æ–Ω–∏ "
                                        "—É—Ö—É–¥—à–∞—é—Ç—Å—è –ø–æ—Å—Ç–æ—è–Ω–Ω–æ).\n"
                                        "2. –°–ª–∞–±–∞—è –∞—Ä–º–∏—è\n"
                                        "–¢–æ–ª—å–∫–æ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ –¥–≤–∞ —ç—Ç–∏—Ö —É—Å–ª–æ–≤–∏—è –¥–∞—é—Ç –ø–æ–≤–æ–¥ –≤—Ä–∞–≥–∞–º –∞—Ç–∞–∫–æ–≤–∞—Ç—å —Ç–µ–±—è.\n"
                                        "–¢–µ–±—è –º–æ–≥—É—Ç '—Ç–µ—Ä–ø–µ—Ç—å' –¥–æ —Ç–µ—Ö –ø–æ—Ä –ø–æ–∫–∞ —É —Ç–µ–±—è —Å–∏–ª—å–Ω–∞—è –∞—Ä–º–∏—è\n"
                                        "–ù–æ —ç—Ç–æ –Ω–µ –∑–Ω–∞—á–∏—Ç —á—Ç–æ —Ç–≤–æ–∏ –¥—Ä—É–∑—å—è –º–æ–≥—É—Ç —Å—Ç–∞—Ç—å –≤—Ä–∞–≥–∞–º–∏ –µ—Å–ª–∏ —É —Ç–µ–±—è —Å–ª–∞–±–∞—è "
                                        "–∞—Ä–º–∏—è —ç—Ç–æ –Ω–µ —Ç–∞–∫.\n"
                                        "–í—ã –≤ –æ–¥–Ω–æ–π –∫–æ–º–∞–Ω–¥–µ? –¥–∞–∂–µ –µ—Å–ª–∏ —É —Ç–µ–±—è —Å–ª–∞–±–∞—è –∞—Ä–º–∏—è –º—ã —Ç–µ–±—è –Ω–µ —Ç—Ä–æ–Ω–µ–º –ø–æ—Ç–æ–º—É "
                                        "—á—Ç–æ —Ç—ã —Å–≤–æ–π –≤ –¥–æ—Å–∫—É. \n"
                                        "–¢–∞–∫ –∂–µ –æ–±—Ä–∞—Ç–∏ –≤–Ω–∏–º–∞–Ω–∏–µ –Ω–∞ —Å–æ—Å–µ–¥–Ω–∏–µ –≤–∫–ª–∞–¥–∫–∏ —ç—Ç–æ–≥–æ –æ–∫–Ω–∞ –Ω–∞–ø—Ä–∏–º–µ—Ä –û—Ç–Ω–æ—à–µ–Ω–∏—è(–¢—É—Ç "
                                        "–º–æ–∂–Ω–æ –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –∫–∞–∫ '–•–æ—Ä–æ—à–æ' —É —Ç–µ–±—è –æ–±—Å—Ç–æ—è—Ç –¥–µ–ª–∞ —Å –¥—Ä—É–≥–∏–º–∏ —Å—Ç—Ä–∞–Ω–∞–º–∏)"},
            {"type": "image", "source": "files/menu/tutorial/politic_3.jpg"},
            {"type": "text", "content": "–ó–¥–µ—Å—å –º—ã –≤–∏–¥–∏–º –∫–∞–∫ –∫ –Ω–∞–º –æ—Ç–Ω–æ—Å—è—Ç—Å—è –∏ –≥–æ—Ç–æ–≤—ã –ª–∏ —Å –Ω–∞–º–∏ –≤—ã–≥–æ–¥–Ω–æ —Ç–æ—Ä–≥–æ–≤–∞—Ç—å(–Ω—É "
                                        "—Ç–æ –µ—Å—Ç—å –±–∞—Ä—Ç–µ—Ä).\n"
                                        "–ö–æ–ª–æ–Ω–∫–∞ –ö—Ñ. —Ç–æ—Ä–≥–æ–≤–ª–∏ –≤–ª–∏—è–µ—Ç –Ω–∞ –≤—ã–≥–æ–¥–Ω–æ—Å—Ç—å —Å–¥–µ–ª–æ–∫ –º–µ–∂–¥—É —Ç–æ–±–æ–π –∏ —Å—Ç—Ä–∞–Ω–æ–π —Å "
                                        "–∫–æ—Ç–æ—Ä–æ–π —Ç—ã —Ö–æ—á–µ—à—å –∑–∞–∫–ª—é—á–∏—Ç—å —Ç–æ—Ä–≥–æ–≤–æ–µ —Å–æ–≥–ª–∞—à–µ–Ω–∏–µ\n"
                                        "(–û—Å–æ–±–µ–Ω–Ω–æ –ø–æ–ª–µ–∑–Ω–æ –∫–æ–≥–¥–∞ –Ω–∞ —Ä—ã–Ω–∫–µ —Ü–µ–Ω—ã —É–ø–∞–ª–∏ –Ω–∞ '–¥–Ω–æ —à–∞—Ö—Ç—ã', –∏ —Ç—ã —Ö–æ—á–µ—à—å "
                                        "—Å–¥–µ–ª–∫—É –ø–æ–≤—ã–≥–æ–¥–Ω–µ–µ) \n "
                                        "\n"
                                        "–ü–µ—Ä–µ–π–¥–µ–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –±–æ–ª—å—à–æ–º—É —Ä–∞–∑–¥–µ–ª—É –∫–æ—Ç–æ—Ä—ã–π —Ç–æ–∂–µ –∏–º–µ–µ—Ç –æ—Ç–Ω–æ—à–µ–Ω–∏–µ –∫ –¥–∏–ø–ª–æ–º–∞—Ç–∏–∏.\n"
                                        ""},
            {"type": "image", "source": "files/menu/tutorial/politic_4.jpg"},
            {"type": "image", "source": "files/menu/tutorial/politic_5.jpg"},
            {"type": "text", "content": "–¢—É—Ç –º—ã –≤–∏–¥–∏–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –Ω–∞–±–æ—Ä –¥–æ–≥–æ–≤–æ—Ä–æ–≤:\n\n"
                                        "–¢–æ—Ä–≥–æ–≤–æ–µ —Å–æ–≥–ª–∞—à–µ–Ω–∏–µ - –æ–±–º–µ–Ω —Ä–µ—Å—É—Ä—Å–∞–º–∏ –Ω–∞ —É—Å–ª–æ–≤–∏—è—Ö –∫–æ—Ç–æ—Ä—ã–µ –ø—Ä–µ–¥—É—Å–º–æ—Ç—Ä–µ–Ω—ã "
                                        "–æ—Ç–Ω–æ—à–µ–Ω–∏—è–º–∏. \n"
                                        "–Ω–∞–ø—Ä–∏–º–µ—Ä –ö—Ñ. 1.5 –¥–∞–µ—Ç –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å —É—Å–ª–æ–≤–Ω–æ –ø—Ä–µ–¥–ª–∞–≥–∞—Ç—å 10, –∞ —Ç—Ä–µ–±–æ–≤–∞—Ç—å 15 "
                                        "–ª—é–±–æ–≥–æ —Ä–µ—Å—É—Ä—Å–∞.\n"
                                        "–î–æ–≥–æ–≤–æ—Ä –æ–± –∫—É–ª—å—Ç—É—Ä–Ω–æ–º –æ–±–º–µ–Ω–µ - –ø—Ä–æ—â–µ –≥–æ–≤–æ—Ä—è –ª–∏–∑–∞—Ç—å –∑–∞–¥–Ω–∏—Ü—É –¥—Ä—É–≥–æ–º—É "
                                        "–≥–æ—Å—É–¥–∞—Ä—Å—Ç–≤—É —á—Ç–æ–±—ã —É–ª—É—á—à–∏—Ç—å —Å –Ω–∏–º –æ—Ç–Ω–æ—à–µ–Ω–∏—è \n"
                                        "–ó–∞–∫–ª—é—á–µ–Ω–∏–µ –º–∏—Ä–∞ - —Ç—É—Ç –≤—Å–µ —è—Å–Ω–æ, –µ—Å–ª–∏ —Ç—ã –ø—Ä–µ–¥–ª–∞–≥–∞–µ—à—å –º–∏—Ä –∏ —Ç—ã —Å–∏–ª—å–Ω–µ–µ –ø—Ä–∏ "
                                        "—ç—Ç–æ–º —Ç–æ –æ–Ω–∏ —Å–æ–≥–ª–∞—Å—è—Ç—Å—è –Ω–∞ –º–∏—Ä –∞ –µ—Å–ª–∏ —Å–ª–∞–±–µ–µ...—Ç–æ–æ...–Ω–µ –ø–æ—à–µ–ª –±—ã...\n"
                                        "–ó–∞–∫–ª—é—á–µ–Ω–∏–µ –∞–ª—å—è–Ω—Å–∞ - –º–æ–∂–Ω–æ –∑–∞–∫–ª—é—á–∏—Ç—å —Å–æ—é–∑ —Å —Å—Ç—Ä–∞–Ω–æ–π —Å –∫–æ—Ç–æ—Ä–æ–π —É —Ç–µ–±—è —Ö–æ—Ä–æ—à–∏–µ "
                                        "–æ—Ç–Ω–æ—à–µ–Ω–∏—è(–∫—É—á–∞ –Ω–∏—à—Ç—è–∫–æ–≤ —Ç–∏–ø–æ –ø–æ–ø—Ä–∞—à–∞–π–Ω–∏—á–µ—Å—Ç–≤–∞ —Ä–µ—Å—É—Ä—Å–æ–≤ –≤–æ–π—Å–∫(–ø–æ–º–æ—â—å –≤ "
                                        "–∑–∞—â–∏—Ç–µ) –∏ –¥–∞–∂–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –ø—Ä–∏–∫–∞–∑–∞—Ç—å —Ä–∞–∑–≤—è–∑–∞—Ç—å –≤–æ–π–Ω—É —Å –¥—Ä—É–≥–∏–º –≥–æ—Å—É–¥–∞—Ä—Å—Ç–≤–æ–º("
                                        "–Ω–∞–ø—Ä–∏–º–µ—Ä –ø–æ–º–æ—á—å —Ç–µ–±–µ –æ—Ç–º—É–¥–æ—Ö–∞—Ç—å –∫–æ–µ –∫–æ–≥–æ))\n"
                                        "–ù–æ —É—á—Ç–∏ –ª—é–±–æ–π –∑–∞–ø—Ä–æ—Å –∫ —Å–æ—é–∑–Ω–∏–∫—É –∏–¥–µ—Ç –¥–æ–ª–≥–æ –∏ –ø–æ–º–æ—â—å –ø—Ä–∏—Ö–æ–¥–∏—Ç –Ω–µ —Å—Ä–∞–∑—É, "
                                        "–≤–æ–π—Å–∫–∞ –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π —Ö–æ–¥, –∞ —Ä–µ—Å—É—Ä—Å—ã —á–µ—Ä–µ–∑ –æ–¥–∏–Ω —Ö–æ–¥\n"
                                        "–ß—Ç–æ–±—ã '–ø–æ–ø–æ–ª—å–∑–æ–≤–∞—Ç—å' —Å–æ—é–∑–Ω–∏–∫–∞ –≤—ã–±–µ—Ä–∏ –≤–∫–ª–∞–¥–∫—É –°–æ—é–∑–Ω–∏–∫ —Ä—è–¥–æ–º —Å –î–∏–ø–ª–æ–º–∞—Ç–∏–µ–π. \n"
                                        "–ó–∞—Ç–µ–º —á—Ç–æ–±—ã –æ—Ç–¥–∞—Ç—å –ø—Ä–∏–∫–∞–∑ –æ–± –æ–±–æ—Ä–æ–Ω–µ, –≤—ã–±–µ—Ä–∏ –∑–∞—â–∏—Ç–∞ –∏ –≥–æ—Ä–æ–¥ –∫–æ—Ç–æ—Ä—ã–π —Ç–µ–±–µ "
                                        "–Ω–∞–¥–æ –∑–∞—â–∏—Ç–∏—Ç—å(–ø—Ä–æ—Å—Ç–æ –Ω–∞–∂–º–∏ –Ω–∞ –Ω–µ–≥–æ) \n"
                                        "–ï—Å–ª–∏ —Ö–æ—á–µ—à—å –æ—Ç–¥–∞—Ç—å –ø—Ä–∏–∫–∞–∑ –æ–± –∞—Ç–∞–∫–µ –Ω–∞ –≤—Ä–∞–≥–∞ –¥–µ–ª–∞–π —Ç–æ–∂–µ —Å–∞–º–æ–µ, –≤—ã–±–∏—Ä–∞–π –∞—Ç–∞–∫–∞ "
                                        "–∏ –≥–æ—Ä–æ–¥ –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–∞.\n"
                                        "–û–±—ä—è–≤–ª–µ–Ω–∏–µ –≤–æ–π–Ω—ã - —Ç—É—Ç –∞–∫–∫—É—Ä–∞—Ç–Ω–µ–µ, –µ—Å–ª–∏ –Ω–µ –≤—ã—Ç—è–Ω–µ—à—å –≤–æ–π–Ω—É –ø–æ—Ç–æ–º —Å–ª–æ–∂–Ω–æ –±—É–¥–µ—Ç "
                                        "–ø–æ–º–∏—Ä–∏—Ç—å—Å—è."},
        ])

        economy_scheme_content = self.create_scrollable_content([
            {"type": "text", "content": "–†–∞–∑–±–µ—Ä—ë–º –ø–æ–¥—Ä–æ–±–Ω–µ–µ, –∫–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç —ç–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–∞—è —Å–∏—Å—Ç–µ–º–∞ –õ—ç—Ä–¥–æ–Ω–∞:\n\n"
                                        "–ï—Å–ª–∏ –ø–æ –ø—Ä–æ—Å—Ç–æ–º—É —Ç–æ —Ç—É—Ç –≤—Å–µ –æ—Ç —á–µ–≥–æ-—Ç–æ –∑–∞–≤–∏—Å–∏—Ç..."},

            {"type": "image", "source": "files/menu/tutorial/shema.png"},
            {"type": "text", "content": "–ë–æ–ª—å–Ω–∏—Ü—ã –ø—Ä–æ–∏–∑–≤–æ–¥—è—Ç —Ä–∞–±–æ—á–∏—Ö, –Ω–æ –ø–æ—Ç—Ä–µ–±–ª—è—é—Ç –∫—Ä–æ–Ω—ã\n"
                                        "–§–∞–±—Ä–∏–∫–∏ —Ç—Ä–µ–±—É—é—Ç —Ä–∞–±–æ—á–∏—Ö, –Ω–æ –≤—ã—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç —Å—ã—Ä—å–µ\n"
                                        "–ù–∞—Å–µ–ª–µ–Ω–∏–µ —Ä–∞—Å—Ç–µ—Ç –æ—Ç –ø—Ä–∏—Ä–æ—Å—Ç–∞ —Ä–∞–±–æ—á–∏—Ö, —Ä–∞–∑–º–µ—Ä–∞ –Ω–∞–ª–æ–≥–æ–≤(–µ—Å–ª–∏ –Ω–∏–∑–∫–∏–µ) –∏ –Ω–∞–ª–∏—á–∏—è —Å—ã—Ä—å—è(–±–µ–∑ –Ω–µ–≥–æ –∏–¥–µ—Ç "
                                        "—Å–æ–∫—Ä–∞—â–µ–Ω–∏–µ –Ω–∞—Å–µ–ª–µ–Ω–∏—è), –Ω–æ –¥–æ–±–∞–≤–ª—è—é—Ç –∫—Ä–æ–Ω—ã –≤ –∫–∞–∑–Ω—É(–µ—Å–ª–∏ –Ω–∞–ª–æ–≥–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã)\n"
                                        "–ê—Ä–º–∏—è —Ç–∞–∫ –∂–µ —Ç—Ä–µ–±—É–µ—Ç –Ω–∞–ª–∏—á–∏—è —Å—ã—Ä—å—è –∏ –∞–∫—Ç–∏–≤–Ω–æ –µ–≥–æ –ø–æ—Ç—Ä–µ–±–ª—è–µ—Ç –≤–º–µ—Å—Ç–µ —Å "
                                        "–Ω–∞—Å–µ–ª–µ–Ω–∏–µ–º, –æ–¥–Ω–∞–∫–æ –µ—Å–ª–∏ –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ –≤–æ–π—Å–∫ –ø—Ä–µ–≤—ã—Å–∏—Ç –ª–∏–º–∏—Ç –∞—Ä–º–∏–∏, —Ç–æ –∫–∞–∂–¥—ã–π "
                                        "—Ö–æ–¥ –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω–∞—è —á–∞—Å—Ç—å –∞—Ä–º–∏–∏ –±—É–¥–µ—Ç "
                                        "—É–º–∏—Ä–∞—Ç—å –æ—Ç –≥–æ–ª–æ–¥–∞. –ü–æ–∫–∞ –µ–µ –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ —Å–Ω–æ–≤–∞ –Ω–µ —Å—Ç–∞–Ω–µ—Ç –º–µ–Ω—å—à–µ –∏–ª–∏ —Ä–∞–≤–Ω–æ –ª–∏–º–∏—Ç—É"}
        ])

        # === –í–∫–ª–∞–¥–∫–∞ "–≠–∫–æ–Ω–æ–º–∏–∫–∞" ===
        economy_tab = TabbedPanelHeader(text='–≠–∫–æ–Ω–æ–º–∏–∫–∞')
        economy_tab.content = economy_content
        economy_tab.size_hint_x = None
        economy_tab.width = Window.width * 0.8 / 4  # ~ 1/4 —à–∏—Ä–∏–Ω—ã –ø–∞–Ω–µ–ª–∏
        self.tab_panel.add_widget(economy_tab)

        # === –í–∫–ª–∞–¥–∫–∞ "–ê—Ä–º–∏—è" ===
        army_tab = TabbedPanelHeader(text='–ê—Ä–º–∏—è')
        army_tab.content = army_content
        army_tab.size_hint_x = None
        army_tab.width = Window.width * 0.8 / 4
        self.tab_panel.add_widget(army_tab)

        # === –í–∫–ª–∞–¥–∫–∞ "–ü–æ–ª–∏—Ç–∏–∫–∞" ===
        politics_tab = TabbedPanelHeader(text='–ü–æ–ª–∏—Ç–∏–∫–∞')
        politics_tab.content = politics_content
        politics_tab.size_hint_x = None
        politics_tab.width = Window.width * 0.8 / 4
        self.tab_panel.add_widget(politics_tab)

        # === –í–∫–ª–∞–¥–∫–∞ "–°—Ö–µ–º–∞ —ç–∫–æ–Ω–æ–º–∏–∫–∏" ===
        economy_scheme_tab = TabbedPanelHeader(text='–°—Ö–µ–º–∞')
        economy_scheme_tab.content = economy_scheme_content
        economy_scheme_tab.size_hint_x = None
        economy_scheme_tab.width = Window.width * 0.8 / 4
        self.tab_panel.add_widget(economy_scheme_tab)
        # –î–æ–±–∞–≤–ª—è–µ–º –≤–∫–ª–∞–¥–∫–∏ –Ω–∞ —ç–∫—Ä–∞–Ω
        self.add_widget(self.tab_panel)
        # –ö–Ω–æ–ø–∫–∞ "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"
        back_button = Button(
            text="–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
            size_hint=(0.4, 0.08),
            pos_hint={'center_x': 0.5, 'y': 0.05},
            background_normal='',
            background_color=(0.2, 0.6, 1, 1),
            color=(1, 1, 1, 1),
            font_size='16sp'
        )
        back_button.bind(on_press=self.back_to_menu)
        self.add_widget(back_button)

    def create_scrollable_content(self, content_blocks):
        layout = BoxLayout(orientation='vertical', size_hint_y=None)
        layout.bind(minimum_height=layout.setter('height'))

        for block in content_blocks:
            if block["type"] == "text":
                label = Label(
                    text=block["content"],
                    halign='left',
                    valign='top',
                    size_hint_y=None,
                    font_size='16sp',
                    text_size=(None, None)  # –°–Ω–∞—á–∞–ª–∞ –Ω–µ –∑–∞–¥–∞–µ–º —à–∏—Ä–∏–Ω—É
                )

                # –ü—Ä–∞–≤–∏–ª—å–Ω–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ bind —Å —É—á—ë—Ç–æ–º –¥–≤—É—Ö –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤
                def update_text_size(lbl, value):
                    lbl.text_size = (lbl.width, None)
                    lbl.height = lbl.texture_size[1]  # –û–±–Ω–æ–≤–ª—è–µ–º –≤—ã—Å–æ—Ç—É –ø–æ–¥ —Ç–µ–∫—Å—Ç

                label.bind(
                    width=update_text_size,
                    texture_size=lambda lbl, value: lbl.setter('height')(lbl, value[1])
                )

                layout.add_widget(label)

            elif block["type"] == "image":
                img = Image(
                    source=block["source"],
                    size_hint=(None, None),
                    width=Window.width * 0.8,
                    height=Window.width * 0.45,
                    allow_stretch=True,
                    keep_ratio=False
                )
                layout.add_widget(img)

        scroll_view = ScrollView(size_hint=(1, 1), do_scroll_x=False, scroll_y=1)
        scroll_view.add_widget(layout)

        # –ü—Ä–æ–∫—Ä—É—Ç–∫–∞ –≤–≤–µ—Ä—Ö —á–µ—Ä–µ–∑ –Ω–µ–±–æ–ª—å—à—É—é –∑–∞–¥–µ—Ä–∂–∫—É
        Clock.schedule_once(lambda dt: setattr(scroll_view, 'scroll_y', 1), 0.1)

        return scroll_view

    def back_to_menu(self, instance):
        app = App.get_running_app()
        app.root.clear_widgets()
        app.root.add_widget(MenuWidget())


class KingdomSelectionWidget(FloatLayout):
    def __init__(self, **kwargs):
        super(KingdomSelectionWidget, self).__init__(**kwargs)
        is_android = platform == 'android'

        # === –°—Ç–∞—Ç–∏—á–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã (—Ñ–æ–Ω, –∑–∞–≥–æ–ª–æ–≤–æ–∫, –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è, —Å–æ–≤–µ—Ç–Ω–∏–∫) ===
        # –§–æ–Ω - –≤–∏–¥–µ–æ
        self.bg_video = Video(
            source='files/menu/choice.mp4',
            state='play',
            options={'eos': 'loop'}  # –ú–æ–∂–µ—Ç —Å—Ä–∞–±–æ—Ç–∞—Ç—å –≤ –Ω–µ–∫–æ—Ç–æ—Ä—ã—Ö —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è—Ö
        )
        self.bg_video.allow_stretch = True
        self.bg_video.keep_ratio = False
        self.bg_video.size = Window.size
        self.bg_video.bind(on_eos=self.loop_video)  # –õ–æ–≤–∏–º –∫–æ–Ω–µ—Ü –≤–∏–¥–µ–æ
        self.add_widget(self.bg_video)

        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        label_size = '20sp' if is_android else '36sp'
        self.select_side_label = Label(
            text="–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–æ—Ä–æ–Ω—É",
            font_size=label_size,
            color=(1, 1, 1, 1),
            outline_color=(0, 0, 0, 1),
            outline_width=2,
            markup=True,
            halign='center',
            valign='middle',
            size_hint=(0.8, None),
            height=dp(60) if is_android else 80,
            pos_hint={'center_x': 0.5, 'top': 0.9}
        )
        self.add_widget(self.select_side_label)

        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ñ—Ä–∞–∫—Ü–∏–∏
        self.faction_info_container = BoxLayout(
            orientation='vertical',
            size_hint=(0.2, None),
            height=dp(120),
            pos_hint={'center_x': 0.73, 'center_y': 0.4},
            spacing=dp(8)
        )
        self.add_widget(self.faction_info_container)

        # –°–æ–≤–µ—Ç–Ω–∏–∫
        advisor_size = (0.3, 0.3) if is_android else (0.25, 0.25)
        self.advisor_image = Image(
            source='files/null.png',
            size_hint=advisor_size,
            pos_hint={'center_x': 0.75, 'center_y': 0.6}
        )
        self.add_widget(self.advisor_image)

        # === –ê–Ω–∏–º–∏—Ä—É–µ–º—ã–π –±–ª–æ–∫ (—Ç–æ–ª—å–∫–æ –∫–Ω–æ–ø–∫–∏) ===
        self.buttons_container = FloatLayout()
        self.add_widget(self.buttons_container)

        # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        self.conn = sqlite3.connect(db_path, check_same_thread=False)
        self.kingdom_data = self.load_kingdoms_from_db()

        # === –ù–æ–≤—ã–µ –∞—Ç—Ä–∏–±—É—Ç—ã –¥–ª—è –ø–æ–¥—Å–≤–µ—Ç–∫–∏ —Ñ—Ä–∞–∫—Ü–∏–∏ ===
        self.selected_button = None

        # –ü–∞–Ω–µ–ª—å –∫–Ω–æ–ø–æ–∫ (–≤—ã–µ–∑–∂–∞–µ—Ç —Å–ª–µ–≤–∞)
        panel_width = 0.3
        button_height = dp(50) if is_android else 60
        spacing_val = dp(10) if is_android else 10
        padding = [dp(20), dp(20), dp(20), dp(20)] if is_android else [20, 20, 20, 20]

        self.kingdom_buttons = BoxLayout(
            orientation='vertical',
            spacing=spacing_val,
            size_hint=(panel_width, None),
            height=self.calculate_panel_height(button_height, spacing_val, padding),
            pos=(-Window.width * 0.5, self.center_y * 2.4)
        )

        for kingdom in self.kingdom_data.keys():
            btn = RoundedButton(
                text=kingdom,
                size_hint_y=None,
                height=button_height,
                font_size='18sp' if is_android else '16sp',
                color=(1, 1, 1, 1),
                bg_color=(0.1, 0.5, 0.9, 1)
            )
            btn.bind(on_press=self.select_kingdom)
            self.kingdom_buttons.add_widget(btn)

        self.buttons_container.add_widget(self.kingdom_buttons)

        # –ö–Ω–æ–ø–∫–∞ "–ù–∞—á–∞—Ç—å –∏–≥—Ä—É" (–ø–æ—è–≤–ª—è–µ—Ç—Å—è —Å–ø—Ä–∞–≤–∞)
        self.start_game_button = RoundedButton(
            text="–ù–∞—á–∞—Ç—å –∏–≥—Ä—É",
            size_hint=(0.3, None),
            height=button_height,
            font_size='18sp' if is_android else '16sp',
            bold=True,
            color=(1, 1, 1, 1),
            bg_color=(0.1, 0.5, 0.9, 1),
            pos=(Window.width * 1.2, Window.height * 0.1)
        )
        self.start_game_button.bind(on_press=self.start_game)
        self.buttons_container.add_widget(self.start_game_button)

        # –ö–Ω–æ–ø–∫–∞ "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"
        back_btn = RoundedButton(
            text="–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
            size_hint=(0.34, 0.08),
            pos=(Window.width * 0.005, Window.height * 0.05),
            color=(1, 1, 1, 1),
            font_size='16sp',
            bg_color=(0.1, 0.5, 0.9, 1)
        )
        back_btn.bind(on_press=self.back_to_menu)
        self.buttons_container.add_widget(back_btn)

        # –ê–Ω–∏–º–∞—Ü–∏—è –ø–æ—è–≤–ª–µ–Ω–∏—è —Ç–æ–ª—å–∫–æ –∫–Ω–æ–ø–æ–∫
        Clock.schedule_once(lambda dt: self.animate_in(), 0.3)

    def loop_video(self, instance):
        print("–í–∏–¥–µ–æ –∑–∞–∫–æ–Ω—á–∏–ª–æ—Å—å, –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º...")
        instance.state = 'stop'
        instance.state = 'play'

    def animate_in(self):
        center_x = Window.width * 0.5
        center_y = Window.height * 0.5

        # –ü–∞–Ω–µ–ª—å —Ñ—Ä–∞–∫—Ü–∏–π ‚Äî –≤—ã–µ–∑–∂–∞–µ—Ç —Å–ª–µ–≤–∞
        anim_panel = Animation(
            x=center_x - self.kingdom_buttons.width / 1.4,
            y=center_y * 0.4,
            duration=0.6,
            t='out_back'
        )
        anim_panel.start(self.kingdom_buttons)

        # –ö–Ω–æ–ø–∫–∞ "–ù–∞—á–∞—Ç—å –∏–≥—Ä—É" ‚Äî –ø–æ—è–≤–ª—è–µ—Ç—Å—è —Å–ø—Ä–∞–≤–∞
        anim_start = Animation(
            x=center_x + self.kingdom_buttons.width / 2 + dp(30),
            y=Window.height * 0.1,
            duration=0.6,
            t='out_back'
        )
        anim_start.start(self.start_game_button)

        # –ö–Ω–æ–ø–∫–∞ "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é" ‚Äî –≤—ã–µ–∑–∂–∞–µ—Ç —Å–ª–µ–≤–∞
        back_btn = self.children[-1]
        anim_back = Animation(
            x=center_x - back_btn.width / 2,
            y=Window.height * 0.001,
            duration=0.6,
            t='out_back'
        )
        anim_back.start(back_btn)

    def calculate_panel_height(self, btn_height, spacing, padding):
        num_buttons = len(self.kingdom_data)
        return (btn_height * num_buttons) + (spacing * (num_buttons - 1)) + (padding[1] + padding[3])

    def back_to_menu(self, instance):
        app = App.get_running_app()
        app.root.clear_widgets()
        app.root.add_widget(MenuWidget())

    def load_kingdoms_from_db(self):
        kingdoms = {}
        try:
            cursor = self.conn.cursor()
            cursor.execute("SELECT kingdom, fortress_name, coordinates, color FROM city_default")
            rows = cursor.fetchall()
            print(f"–ó–∞–≥—Ä—É–∂–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π –∏–∑ city_default: {len(rows)}")
            for row in rows:
                kingdom, fortress_name, coordinates, color = row
                if kingdom not in kingdoms:
                    kingdoms[kingdom] = {"fortresses": [], "color": color}
                kingdoms[kingdom]["fortresses"].append({"name": fortress_name, "coordinates": coordinates})
        except sqlite3.Error as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {e}")
        return kingdoms

    def select_kingdom(self, instance):
        kingdom_name = instance.text
        kingdom_info = self.kingdom_data[kingdom_name]

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π —Ü–≤–µ—Ç
        if not hasattr(instance, "original_color"):
            instance.original_color = instance.rect_color.rgba

        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â—É—é –∫–Ω–æ–ø–∫—É
        if self.selected_button:
            self.selected_button.rect_color.rgba = self.selected_button.original_color

        # –ü—Ä–∏–º–µ–Ω—è–µ–º –Ω–æ–≤—ã–π —Ü–≤–µ—Ç
        faction_color = kingdom_info["color"]
        rgba_color = self.hex_to_rgba(faction_color)
        instance.rect_color.rgba = rgba_color
        self.selected_button = instance

        # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
        kingdom_rename = {
            "–ê—Ä–∫–∞–¥–∏—è": "arkadia",
            "–°–µ–ª–µ—Å—Ç–∏—è": "celestia",
            "–≠—Ç–µ—Ä–∏—è": "eteria",
            "–•–∏–ø–µ—Ä–∏–æ–Ω": "giperion",
            "–•–∞–ª–∏–¥–æ–Ω": "halidon"
        }
        app = App.get_running_app()
        app.selected_kingdom = kingdom_name
        english_name = kingdom_rename.get(kingdom_name, kingdom_name).lower()
        advisor_image_path = f'files/sov/sov_{english_name}.jpg'
        self.advisor_image.source = advisor_image_path
        self.advisor_image.reload()

        # === –û–ë–ù–û–í–õ–ï–ù–ò–ï: –≤—ã–∑—ã–≤–∞–µ–º –º–µ—Ç–æ–¥, –∫–æ—Ç–æ—Ä—ã–π –∑–∞–ø–æ–ª–Ω—è–µ—Ç self.faction_label —á–µ—Ä–µ–∑ Image() ===
        self.get_kingdom_info(kingdom_name)

    def hex_to_rgba(self, hex_color):
        return (0, 0.3, 0.4, 1)

    def generate_icons_layout(self, value, max_value=3):
        layout = BoxLayout(orientation='horizontal', size_hint_y=None, height='20dp')
        for i in range(max_value):
            img_path = 'files/pict/menu/full.png' if i < value else 'files/pict/menu/grey.png'
            img = Image(source=img_path, size_hint=(None, None), size=('16dp', '16dp'))
            layout.add_widget(img)
        return layout

    def get_kingdom_info(self, kingdom):
        full_img = 'files/pict/menu/full.png'
        empty_img = 'files/pict/menu/grey.png'

        if not os.path.exists(full_img) or not os.path.exists(empty_img):
            print("‚ùå –û–¥–∏–Ω –∏–ª–∏ –æ–±–∞ —Ñ–∞–π–ª–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç!")
            return self.get_fallback_kingdom_info(kingdom)

        stats = {
            "–ê—Ä–∫–∞–¥–∏—è": {"–î–æ—Ö–æ–¥ –∫—Ä–æ–Ω": 3, "–î–æ—Ö–æ–¥ —Å—ã—Ä—å—è": 1, "–ê—Ä–º–∏—è": 2},
            "–°–µ–ª–µ—Å—Ç–∏—è": {"–î–æ—Ö–æ–¥ –∫—Ä–æ–Ω": 2, "–î–æ—Ö–æ–¥ —Å—ã—Ä—å—è": 2, "–ê—Ä–º–∏—è": 2},
            "–•–∏–ø–µ—Ä–∏–æ–Ω": {"–î–æ—Ö–æ–¥ –∫—Ä–æ–Ω": 2, "–î–æ—Ö–æ–¥ —Å—ã—Ä—å—è": 2, "–ê—Ä–º–∏—è": 3},
            "–•–∞–ª–∏–¥–æ–Ω": {"–î–æ—Ö–æ–¥ –∫—Ä–æ–Ω": 1, "–î–æ—Ö–æ–¥ —Å—ã—Ä—å—è": 3, "–ê—Ä–º–∏—è": 1},
            "–≠—Ç–µ—Ä–∏—è": {"–î–æ—Ö–æ–¥ –∫—Ä–æ–Ω": 1, "–î–æ—Ö–æ–¥ —Å—ã—Ä—å—è": 2, "–ê—Ä–º–∏—è": 2}
        }

        data = stats.get(kingdom)
        if not data:
            return ""

        # –ß–∏—Å—Ç–∏–º —Å—Ç–∞—Ä—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç
        self.faction_info_container.clear_widgets()

        # –ó–∞–≥–æ–ª–æ–≤–æ–∫: –ù–∞–∑–≤–∞–Ω–∏–µ —Ñ—Ä–∞–∫—Ü–∏–∏ ‚Äî –±–æ–ª—å—à–µ –∏ –ª–µ–≤–µ–µ
        title_label = Label(
            text=f"[b]{kingdom}[/b]",
            markup=True,
            font_size='20sp' if platform == 'android' else '24sp',  # ‚Üê –ë–æ–ª—å—à–µ —Ç–µ–∫—Å—Ç
            size_hint_y=None,
            height=dp(10),
            halign='left',
            valign='middle',
            text_size=(None, dp(40))
        )
        self.faction_info_container.add_widget(title_label)

        # –î–æ—Ö–æ–¥ –∫—Ä–æ–Ω
        crown_row = BoxLayout(size_hint_y=None, height=dp(20))
        crown_row.add_widget(Label(text="–î–æ—Ö–æ–¥ –∫—Ä–æ–Ω:", size_hint_x=None, width=dp(100)))
        crown_row.add_widget(self.generate_icons_layout(data["–î–æ—Ö–æ–¥ –∫—Ä–æ–Ω"]))
        self.faction_info_container.add_widget(crown_row)

        # –î–æ—Ö–æ–¥ —Å—ã—Ä—å—è
        resource_row = BoxLayout(size_hint_y=None, height=dp(20))
        resource_row.add_widget(Label(text="–î–æ—Ö–æ–¥ —Å—ã—Ä—å—è:", size_hint_x=None, width=dp(100)))
        resource_row.add_widget(self.generate_icons_layout(data["–î–æ—Ö–æ–¥ —Å—ã—Ä—å—è"]))
        self.faction_info_container.add_widget(resource_row)

        # –ê—Ä–º–∏—è
        army_row = BoxLayout(size_hint_y=None, height=dp(20))
        army_row.add_widget(Label(text="–ê—Ä–º–∏—è:", size_hint_x=None, width=dp(100)))
        army_row.add_widget(self.generate_icons_layout(data["–ê—Ä–º–∏—è"]))
        self.faction_info_container.add_widget(army_row)

    def start_game(self, instance):
        conn = sqlite3.connect(db_path)
        clear_tables(conn)
        conn.close()
        restore_from_backup()
        app = App.get_running_app()
        selected_kingdom = app.selected_kingdom
        if not selected_kingdom:
            print("–§—Ä–∞–∫—Ü–∏—è –Ω–µ –≤—ã–±—Ä–∞–Ω–∞.")
            return
        cities = load_cities_from_db(selected_kingdom)
        if not cities:
            print("–ì–æ—Ä–æ–¥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
            return
        game_screen = GameScreen(selected_kingdom, cities, db_path=db_path)
        app.root.clear_widgets()
        map_widget = MapWidget(selected_kingdom=selected_kingdom, player_kingdom=selected_kingdom)
        app.root.add_widget(map_widget)
        app.root.add_widget(game_screen)

# –û—Å–Ω–æ–≤–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
class EmpireApp(App):
    def __init__(self, **kwargs):
        super(EmpireApp, self).__init__(**kwargs)
        # –§–ª–∞–≥, —á—Ç–æ –º—ã –Ω–∞ –º–æ–±–∏–ª—å–Ω–æ–π –ø–ª–∞—Ç—Ñ–æ—Ä–º–µ Android
        self.is_mobile = (platform == 'android')
        # –ú–æ–∂–Ω–æ –∑–∞–≤–µ—Å—Ç–∏ –¥—Ä—É–≥–∏–µ –≥–ª–æ–±–∞–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∑–¥–µ—Å—å
        self.selected_kingdom = None  # –ê—Ç—Ä–∏–±—É—Ç –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –∫–æ—Ä–æ–ª–µ–≤—Å—Ç–≤–∞

    def build(self):
        return MenuWidget()  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –≤–∏–¥–∂–µ—Ç –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é

    def restart_app(self):
        # –Ø–≤–Ω–æ–µ –∑–∞–∫—Ä—ã—Ç–∏–µ –≤—Å–µ—Ö —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
        conn = sqlite3.connect(db_path)
        clear_tables(conn)
        conn.close()

        # –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–∑ –±—ç–∫–∞–ø–∞
        restore_from_backup()

        # –°–±—Ä–æ—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        self.selected_kingdom = None

        # –ü–æ–ª–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –∫–æ—Ä–Ω–µ–≤–æ–≥–æ –≤–∏–¥–∂–µ—Ç–∞
        self.root.clear_widgets()

        # –ü–µ—Ä–µ—Å–æ–∑–¥–∞–Ω–∏–µ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
        Clock.schedule_once(self.recreate_main_menu, 0.2)

    def recreate_main_menu(self, dt):
        self.root.add_widget(MenuWidget())
        print("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –ø–æ–ª–Ω–æ—Å—Ç—å—é –ø–µ—Ä–µ—Å–æ–∑–¥–∞–Ω–æ")

    def on_stop(self):
        # –ó–∞–∫—Ä—ã–≤–∞–µ–º –≤—Å–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏
        for child in self.root.children:
            if hasattr(child, 'conn'):
                child.conn.close()

        # –û—á–∏—Å—Ç–∫–∞ —É—Å—Ç–∞—Ä–µ–≤—à–∏—Ö —Ñ–∞–π–ª–æ–≤ SQLite (.shm, .wal)
        cleanup_sqlite_cache(copied_db_path)


if __name__ == '__main__':
    cleanup_sqlite_cache(copied_db_path)
    EmpireApp().run()  # –ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
